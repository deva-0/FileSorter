@inject IJSRuntime JS
<div class="modal fade" id="folderModal" tabindex="-1" aria-labelledby="folderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add new folder</h4>
                <button type="button" class="close" data-bs-dismiss="modal">&times;</button>
            </div>
            <div class="modal-body">
                <p>Insert name for new folder</p>
                <input class="form-control" type="text" id="FolderName" name="FolderName" @bind="_folderName" @bind:event="oninput" placeholder="New folder name">
                @if (string.IsNullOrWhiteSpace(_folderName))
                {
                    _customButtonParameter = new Dictionary<string, object> { { "disabled", "" } };
                }
                else if (ExistingFolders!.Contains(_folderName))
                {
                    _customButtonParameter = new Dictionary<string, object> { { "disabled", "" } };
                    <p>Folder with that name already exists</p>
                }
                else if (_folderName.IndexOfAny(Path.GetInvalidFileNameChars().ToArray()) != -1)
                {
                    _customButtonParameter = new Dictionary<string, object> { { "disabled", "" } };
                    <p>Illegal name of folder</p>
                }
                else
                {
                    _customButtonParameter = null;
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick=@AddFolderAndClose @attributes=_customButtonParameter>Add folder</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter] public string[]? ExistingFolders { get; set; }
    [Parameter] public EventCallback<string> OnSaveTask { get; set; }
    private Dictionary<string, object>? _customButtonParameter { get; set; }
    private string? _folderName { get; set; }

    public async Task Init()
    {
        _folderName = string.Empty;
    }

    private async Task AddFolderAndClose()
    {
        if (!String.IsNullOrWhiteSpace(_folderName) && !ExistingFolders!.Contains(_folderName))
        {
            await InvokeAsync(() => OnSaveTask.InvokeAsync(_folderName));
        }
    }
}