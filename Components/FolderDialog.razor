@inject IJSRuntime JS
<div class="modal fade" id="folderModal" tabindex="-1" aria-labelledby="folderModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Add new folder</h4>
                <button type="button" class="close" data-bs-dismiss="modal" >&times;</button>
            </div>
            <div class="modal-body">
                <p>Insert name for new folder</p>
                <input class="form-control" type="text" id="FolderName" name="FolderName" @bind="FolderName" @bind:event="oninput" placeholder="New folder name">
                @if (string.IsNullOrWhiteSpace(FolderName)) 
                {
                    customButtonParameter = new Dictionary<string, object> { { "disabled", "" } };
                }
                else if (ExistingFolders!.Contains(FolderName))
                {
                    customButtonParameter = new Dictionary<string, object> { { "disabled", "" } };
                    <p>Folder with that name already exists</p>
                }
                else if (FolderName.IndexOfAny(Path.GetInvalidFileNameChars().ToArray()) != -1)
                {
                    customButtonParameter = new Dictionary<string, object> { { "disabled", "" } };
                    <p>Illegal name of folder</p>
                }
                else
                {
                    customButtonParameter = null;
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick=@AddFolderAndClose @attributes=customButtonParameter>Add folder</button>
                <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter] public string[]? ExistingFolders { get; set; }
    [Parameter] public EventCallback<string> OnSave { get; set; }
    private Dictionary<string, object>? customButtonParameter { get; set; }
    private string? FolderName { get; set; }
    private DotNetObjectReference<FolderDialog> dotNetObjectReference;
    
    protected override async Task OnInitializedAsync()
    {
        dotNetObjectReference = DotNetObjectReference.Create(this);
        JS.InvokeVoidAsync("folderReference.setDotNetReference", dotNetObjectReference);
    }

    [JSInvokable("reloadModal")]
    public async void reload()
    {
        FolderName = string.Empty;
    }

    private async Task AddFolderAndClose()
    {
        if (!String.IsNullOrWhiteSpace(FolderName) && !ExistingFolders!.Contains(FolderName))
        {
            await JS.InvokeVoidAsync("closeModal", "folderModal");
            await Task.Delay(100);
            await InvokeAsync(() => OnSave.InvokeAsync(FolderName));
            FolderName = string.Empty;
        }
    }
}