<div class="modal fade show" id="dialog" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@Caption</h4>
                <button type="button" class="close" @onclick="@Cancel">&times;</button>
            </div>
            <div class="modal-body">
                @switch (Type)
                {
                    case Category.FolderAdd:
                        <p>@Message</p>
                        <input type="text" id="AdditionalValue" name="AdditionalValue" @bind="AdditionalValue" placeholder="New folder name">
                        <p>@Alert</p>
                        break;
                    default:
                        <p>@Message</p>
                        break;
                }
            </div>
            <div class="modal-footer">
                @switch (Type)
                {
                    case Category.Okay:
                        <button type="button" class="btn btn-primary" @onclick=@Ok>OK</button>
                        break;
                    case Category.SaveNot:
                        <button type="button" class="btn btn-primary" @onclick=@Ok>Save</button>
                        <button type="button" class="btn btn-warning" @onclick="@Cancel">Don't Save</button>
                        break;
                    case Category.DeleteNot:
                        <button type="button" class="btn btn-danger" @onclick=@Ok>Delete</button>
                        <button type="button" class="btn btn-warning" @onclick="@Cancel">Don't Delete</button>
                        break;
                    case Category.FolderAdd:
                        <button type="button" class="btn btn-primary" @onclick=@OkWithValue>Add folder</button>
                        <button type="button" class="btn btn-danger" @onclick="@Cancel">Cancel</button>
                        break;
                }
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter] public string? Caption { get; set; }
    [Parameter] public string? Message { get; set; }
    [Parameter] public string? Alert { get; set; }
    [Parameter] public string? AdditionalValue { get; set; }
    [Parameter] public string[]? AdditionalValuesToNotRepeat { get; set; }
    [Parameter] public EventCallback<bool> OnClose { get; set; }
    [Parameter] public EventCallback<string> OnCloseWithValue { get; set; }
    [Parameter] public Category Type { get; set; }
    private async Task Cancel()
    {
        await InvokeAsync(() => OnClose.InvokeAsync(false));
    }
    private async Task Ok()
    {
        await InvokeAsync(() => OnClose.InvokeAsync(true));
    }
    private async Task OkWithValue()
    {
        if (String.IsNullOrWhiteSpace(AdditionalValue))
        {
            Alert = "Cannot add folder without name";
            return;
        }
        if (AdditionalValuesToNotRepeat!.Contains(AdditionalValue))
        {
            Alert = "Folder with that name already exists";
            return;
        }
        await InvokeAsync(() => OnCloseWithValue.InvokeAsync(AdditionalValue));
    }
    public enum Category
    {
        Okay,
        SaveNot,
        DeleteNot,
        FolderAdd
    }
}