@page "/sorter"
@using Sorter.Data;
@inject FileService FileService
@inject IJSRuntime theJavaScriptEngine
@inject IHostApplicationLifetime AppLifetime

<PageTitle>Sorter</PageTitle>
<h1>Sorter</h1>
<br />

@if (folders == null)
{
    <p>Click to start</p>
    <button class="btn btn-primary" @onclick="InitSession">Init session</button>
    @*<p><em>Loading...</em></p>*@
    @*<video style="display:none"  id="videoTagId"></video>*@
}
else
{
    <p>@file?.PhysicalPath?.Replace(file.Name,"") # @file?.Name</p>
    <button class="btn btn-primary" @onclick="Back">Back</button>
    <button class="btn btn-primary" @onclick="Reset">Reset server</button>
    <button class="btn btn-primary" @onclick="Next">Next</button>
    <button class="btn btn-primary" @onclick="() => AppLifetime.StopApplication()">Shut down</button>
    <br />
    <table>
        <tbody>
            @for (int i = 0; i < folders.Length;)
            {
                <tr>
                    @for (int j = 0; j < cols && i < folders.Length; j++, i++)
                    {
                        var k = i;
                        <td>
                            <button class="btn btn-primary" @onclick="()=>MoveFile(folders[k].Path)">@folders[k].Name</button>
                        </td>
                    }
                </tr>
            }
        </tbody>

    </table>
    <br />
    @*@foreach (var tuple in MyMediaIndexes)
    {
        <p>@tuple.Item1 | @tuple.Item2</p>
    }*@

    @if (VideoExtensions.Contains(file?.Extension?.ToLower()))
    {
        @*<BlazoredVideo class="w-100"
               style="max-width:800px;max-height:700px;"
               id="videoTagId"
               controls="controls"
               autoplay="autoplay">
            <source src="@file?.Path" type="video/mp4" />
        </BlazoredVideo>*@
        <video style="max-width:800px;max-height:700px;" controls autoplay id="videoTagId">
            <source src="@file?.Path" type="video/@file.Extension">
            Your browser does not support the video tag.
        </video>
    }
    else if (PhotoExtensions.Contains(file?.Extension?.ToLower()))
    {
        <img src="@file?.Path" style="max-width:800px;max-height:700px;" />
        @*<video style="display:none" id="videoTagId"></video>*@
    }
    else if ("pdf".Equals(file?.Extension?.ToLower()))
    {
        <embed src="@file?.Path" style="width:500px;height:707px;" />
        @*<video style="display:none" id="videoTagId"></video>*@
    }
    else if (TextExtensions.Contains(file?.Extension?.ToLower()))
    {
        <pre>
            @GetTextFileContent()
                </pre>
        @*<video style="display:none" id="videoTagId"></video>*@
    }
    else
    {
        <p>Filetype @file?.Extension is already not supported</p>
        @*<video style="display:none" id="videoTagId"></video>*@
    }


}

@code {
    private string[] VideoExtensions = { "avi", "mp4", "webm", "mov", "wmv", "flv" };
    private string[] PhotoExtensions = { "gif", "jpeg", "jpg", "png", "webp" };
    private string[] TextExtensions = { "txt" };
    private List<Tuple<int, string>> MyMediaIndexes;
    private int MyMediaCurrentIndex;
    private File? file;
    private Folder[]? folders;
    private double? cols;
    private static int LOAD_VIDEO_TIME_DELAY = 100;
    private static int MOVE_FILE_TIME_DELAY = 500;
    private static int BRAJANEK = 4; // its MAX_COLUMN_NUMBER but i really need to name this like that. Please, respect this and do not change.

    //protected override async Task OnInitializedAsync()
    //{
    //    folders = await FileService.GetFoldersAsync();
    //    MyMediaIndexes = new List<int>();
    //    cols = Math.Min(Math.Ceiling(Math.Sqrt(folders.Length)), 4);
    //    MyMediaCurrentIndex = -1;
    //    Console.WriteLine(folders.Length);
    //    GetFile();
    //    Next();
    //    InitSession();
    //}
    private async void ReloadPlayerIfVideo()
    {
        if (VideoExtensions.Contains(file?.Extension?.ToLower()))
        {
            await Task.Delay(LOAD_VIDEO_TIME_DELAY);
            theJavaScriptEngine.InvokeVoidAsync("loadVideo");
        }
    }
    private async void InitSession()
    {
        int? index = FileService.GetNextIndex();
        if (index.HasValue)
        {
            file = FileService.GetFileAtIndex(index.Value);
            folders = await FileService.GetFoldersAsync();
            cols = Math.Min(Math.Ceiling(Math.Sqrt(folders.Length)), BRAJANEK);
            MyMediaIndexes = new List<Tuple<int, string>>() { new Tuple<int, string>(file.FIndex.Value, file.Name) };
            MyMediaCurrentIndex = 0;
        }
        // TODO: add empty directory handling
    }
    private async void Reset()
    {
        FileService.ResetFiles();
        InitSession();
        ReloadPlayerIfVideo();
    }
    private void GetNextFileFromOurTab()
    {
        MyMediaCurrentIndex++;
        try
        {
            file = FileService.GetFileAtIndex(MyMediaIndexes[MyMediaCurrentIndex].Item1, MyMediaIndexes[MyMediaCurrentIndex].Item2);
        }
        catch (Exception)
        {
            // TODO: add session reload handling
            return;
        }
    }
    private void GetNextFileFromFileService()
    {
        int? index = FileService.GetNextIndex();
        if (index.HasValue)
        {
            file = FileService.GetFileAtIndex(index.Value);
            //MyMediaIndexes.Add(file.FIndex.Value);
            MyMediaIndexes.Add(new Tuple<int, string>(file.FIndex.Value, file.Name));
            MyMediaCurrentIndex++;
        }
        // TODO: add empty directory handling
    }

    private void Next()
    {
        if (MyMediaCurrentIndex < MyMediaIndexes.Count - 1) GetNextFileFromOurTab();
        else GetNextFileFromFileService();
        ReloadPlayerIfVideo();
    }
    private void Back()
    {
        if (MyMediaCurrentIndex > 0)
        {
            MyMediaCurrentIndex--;
            try
            {
                file = FileService.GetFileAtIndex(MyMediaIndexes[MyMediaCurrentIndex].Item1, MyMediaIndexes[MyMediaCurrentIndex].Item2);
            }
            catch (Exception)
            {
                return;
                // TODO: add session reload handling
            }
            ReloadPlayerIfVideo();
        }
        else
        {
            return;
            // TODO: add first file handling
        }
    }
    private async void MoveFile(string destiny)
    {
        if (file == null) return;
        var oldFile = file;
        Next();
        await Task.Delay(MOVE_FILE_TIME_DELAY);
        FileService.MoveFile(oldFile, destiny);
    }
    private string GetTextFileContent()
    {
        return System.IO.File.ReadAllText(file.PhysicalPath);
    }
}
