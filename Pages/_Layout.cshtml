@using Microsoft.AspNetCore.Components.Web
@namespace Sortownik.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="Sortownik.styles.css" rel="stylesheet" />
    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    @RenderBody()

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <script src="_framework/blazor.server.js"></script>
    <script>
        function loadVideo() {
            document.getElementById("videoTagId")?.load();
        }
        //function initializeObserver() {
            // Select the node that will be observed for mutations
            //var targetNode = document.getElementById("videoTagId");
            //// Options for the observer (which mutations to observe)
            //var config = { attributes: true, childList: true, subtree: true };
            //// Callback function to execute when mutations are observed
            //var callback = (mutationList, observer) => {
            //    for (const mutation of mutationList) {
            //        //if (mutation.type === 'childList') {
            //        console.log(`The ${mutation} attribute was modified.`);
            //        //}
            //    }
            //};
            //// Create an observer instance linked to the callback function
            //var observer = new MutationObserver(callback);
            //// Start observing the target node for configured mutations
            //observer.observe(targetNode, config);

        //}

                //var observer = new MutationObserver(function (mutations) {
                //    mutations.forEach(function (mutation) {
                //        if (mutation.type === 'attribute' && mutation.attributeName === 'loop') {
                //            console.log('loop changed', video.loop);
                //        }
                //    });
                //});

                //observer.observe(video, {
                //    attributes: true
                //});

    </script>
</body>
</html>
