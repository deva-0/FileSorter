@page "/config"
@using Microsoft.Extensions.Options;
@using Sorter;
@using System.Text.Json;
@using Sorter.Data;
@inject Microsoft.AspNetCore.Hosting.IWebHostEnvironment hostingEnv
@inject NavigationManager NavigationManager;
@inject IOptionsSnapshot<ConfigOptions> configOptions
@inject DestinationDFP DESTDFP
@inject SourceDFP SRCDFP
@inject IToastService toastService
@inject FileService FileService

<PageTitle>Sorter configuration</PageTitle>
<h1>Configuration</h1>
@*password*@
<form class="form">
    <div class="form-group row">
        <label for="password" class="col-sm-2 col-form-label">Password</label>
        <div class="col-sm-10">
            <input class="form-control" type="password" id="passwordToUnlock" name="passwordToUnlock" @bind="unlockBoxPassword" @bind:event="oninput" placeholder="Type password here">
        </div>
    </div>
</form>
<p id="error">@(ErrorMessage)</p>
<br />
@if (truePassword.Equals(unlockBoxPassword))
{
    //save buttin
    <div class="row mb-3">
        <div class="col">
            <div class="d-grid">
                <button class="btn btn-primary" @onclick="Save">Save new configuration</button>
            </div>
        </div>
        @if (!@hostingEnv.IsProduction())
        {
            <div class="col">
                <div class="d-grid">
                    <button class="btn btn-info" @onclick="LoadDefaultTestConfig">Load default config for testing</button>
                </div>
            </div>
        }
    </div>
    //new password
    <div class="row mb-3">
        <label for="newPass" class="col-sm-2 col-form-label">New password:</label>
        <div class="col-sm-10">
            <input class="form-control" type="password" id="newPass" name="newPass" @bind="newPassword" placeholder="New password">
        </div>
    </div>
    //password hint
    <div class="row mb-3">
        <div class="col-sm-10 offset-2">
            <p>Remember: this password is neither secure nor serious. It's just a quick way to hide your configuration from your friends</p>
        </div>
    </div>
    //source
    <div class="row mb-3">
        <label for="source" class="col-sm-2 col-form-label">Source:</label>
        <div class="col-sm-6">
            <input class="form-control" type="text" id="source" name="source" @bind="source" @bind:event="oninput" placeholder="Source directory path">
        </div>
        <div class="col-sm-4">
            @if (!String.IsNullOrWhiteSpace(source) && Directory.Exists(Path.GetFullPath(source)))
            {
                <p>Path is valid</p>
            }
            else
            {
                <p>Path is invalid</p>
            }
        </div>
    </div>
    //destination
    <div class="row mb-3">
        <label for="destination" class="col-sm-2 col-form-label">Destination:</label>
        <div class="col-sm-6">
            <input class="form-control" type="text" id="destination" name="destination" @bind="destination" @bind:event="oninput" placeholder="Destination directory path">
        </div>
        <div class="col-sm-4">
            @if (!String.IsNullOrWhiteSpace(destination) && Directory.Exists(Path.GetFullPath(destination)))
            {
                <p>Path is valid</p>
            }
            else
            {
                <p>Path is invalid</p>
            }
        </div>
    </div>
    //renaming
    <div class="row mb-3">
        <div class="col-sm-10 offset-sm-2">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="allowRename" name="allowRename" @bind="allowRename">
                <label class="form-check-label" for="allowRename">
                    Allow all users to rename the files
                </label>
            </div>
        </div>
    </div>
    //white or black
    <div class="row mb-3">
        <div class="col-sm-10 offset-sm-2">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" id="use_white" name="use_white" @bind="useWhite">
                <label class="form-check-label" for="gridCheck1">
                    Use white list of extensions instead of black list
                </label>
            </div>
            @if (useWhite)
            {
                <div class="container">
                    <div class="row row-cols-auto">
                        @foreach (var item in whiteList)
                        {
                            <div class="col">
                                @item
                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => RemoveWhite(item)">X</button>
                            </div>
                        }
                        <div class="col">
                            <input class="form-control" placeholder="New extension" @bind="newWhite" />
                        </div>
                        <div class="col">
                            <button class="btn btn-dark btn-sm" @onclick="AddWhite">Add</button>
                        </div>
                    </div>
                </div>
            }
            else
            {
                <div class="container">
                    <div class="row row-cols-auto">
                        @foreach (var item in blackList)
                        {
                            <div class="col">
                                @item
                                <button class="btn btn-outline-secondary btn-sm" @onclick="() => RemoveBlack(item)">X</button>
                            </div>
                        }
                        <div class="col">
                            <input class="form-control" placeholder="New extension" @bind="newWhite" />
                        </div>
                        <div class="col">
                            <button class="btn btn-dark btn-sm" @onclick="AddBlack">Add</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
    //exclude dirs
    <div class="row mb-3">
        <label for="exclude-dirs" class="col-sm-2 col-form-label">Directories to exclude:</label>
        <div class="col-sm-10">
            <div class="row row-cols-auto">
                @foreach (var item in excludeList)
                {
                    <div class="col">
                        @item
                        <button class="btn btn-outline-secondary btn-sm" @onclick="() => RemoveExclude(item)">X</button>
                    </div>
                }
                <div class="col">
                    <input class="form-control" placeholder="Folder to exclude" @bind="newExclude" />
                </div>
                <div class="col">
                    <button class="btn btn-dark btn-sm" @onclick="AddExclude">Add</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <p>You need to provide password, to change the app settings. Password can be find in config.json file</p>
}

@code {
    private string source=String.Empty;
    private string destination = String.Empty;
    private List<string> excludeList=new List<string>();
    private string newExclude = String.Empty;
    private bool useWhite=true;
    private List<string> whiteList = new List<string>();
    private string newWhite = String.Empty;
    private List<string> blackList = new List<string>();
    private string newBlack = String.Empty;
    private string ErrorMessage = string.Empty;
    private string unlockBoxPassword = String.Empty;
    private string truePassword = String.Empty;
    private string newPassword = String.Empty;
    private bool allowRename=true;

    protected override async Task OnInitializedAsync()
    {
        if (Directory.Exists(Path.GetFullPath(configOptions.Value.Source)))
        {
            source = Path.GetFullPath(configOptions.Value.Source);
        }
        if (Directory.Exists(Path.GetFullPath(configOptions.Value.Destination)))
        {
            destination = Path.GetFullPath(configOptions.Value.Destination);
        }
        excludeList = Array.ConvertAll(configOptions.Value.ExcludeDirs, dir => dir = Path.GetFullPath(dir)).ToList();
        useWhite = configOptions.Value.UseWhiteListInsteadOfBlackList;
        whiteList = configOptions.Value.WhiteList.ToList();
        blackList = configOptions.Value.BlackList.ToList();
        truePassword = configOptions.Value.Password;
        newPassword = truePassword;
        allowRename = configOptions.Value.AllowRename;
    }
    private void Save()
    {
        var config = configOptions.Value;
        if (!Directory.Exists(Path.GetFullPath(source)))
        {
            toastService.ShowError("Source path is invalid");
            //ErrorMessage = "Source is invalid";
            return;
        }
        if (!Directory.Exists(Path.GetFullPath(destination)))
        {
            toastService.ShowError("Destination path is invalid");
            //ErrorMessage = "Destination is invalid";
            return;
        }
        config.Source = source;
        config.Destination = destination;
        config.ExcludeDirs = excludeList.ToArray();
        config.UseWhiteListInsteadOfBlackList = useWhite;
        config.WhiteList = whiteList.ToArray();
        config.BlackList = blackList.ToArray();
        config.Password = newPassword;
        config.AllowRename = allowRename;

        try
        {
            var filePath = Path.Combine(AppContext.BaseDirectory, "config.json");
            string jsonString = JsonSerializer.Serialize(config);
            jsonString = String.Concat("{\"config\": ", jsonString, "}");
            System.IO.File.WriteAllText("config.json", jsonString);
            SRCDFP.UpdateProvider(config.Source);
            DESTDFP.UpdateProvider(config.Destination);
            toastService.ShowSuccess("Settings are saved");
            Thread.Sleep(500);
            FileService.ResetFiles();
            OnInitializedAsync();
        }
        catch
        {
            toastService.ShowError("Error writing app settings");
        }
    }
    private void RemoveExclude(string exclude)
    {
        excludeList.Remove(exclude);
    }
    private void AddExclude()
    {
        if (!string.IsNullOrWhiteSpace(newExclude))
        {
            try
            {
                var path = Path.GetFullPath(newExclude.Replace("\"", ""));
                if (Directory.Exists(path) && !excludeList.Contains(path))
                {
                    excludeList.Add(path);
                    newExclude = string.Empty;
                }
                else
                {
                    toastService.ShowWarning("Invalid path");
                }
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
            }
        }
    }
    private void RemoveWhite(string white)
    {
        whiteList.Remove(white);
    }
    private void AddWhite()
    {
        if (!string.IsNullOrWhiteSpace(newWhite) && !whiteList.Contains(newWhite))
        {
            whiteList.Add(newWhite);
            newWhite = string.Empty;
        }
    }
    private void RemoveBlack(string black)
    {
        blackList.Remove(black);
    }
    private void AddBlack()
    {
        if (!string.IsNullOrWhiteSpace(newBlack) && !whiteList.Contains(newBlack))
        {
            blackList.Add(newBlack);
            newBlack = string.Empty;
        }
    }
    private void LoadDefaultTestConfig()
    {
        System.IO.File.Copy("..\\default_config.json", "config.json", true);
        NavigationManager.NavigateTo("config", true);
    }
}

